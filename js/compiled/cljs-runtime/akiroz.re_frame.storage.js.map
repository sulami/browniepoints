{"version":3,"sources":["akiroz/re_frame/storage.cljs"],"mappings":";AAMA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACA,AAACC,AAAQC,AAAUC,AACnB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAA8BC;AAA9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BA,AAC9B,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAA,AAA8BC;AAA9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BA,AAC9B,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAA,AAA8BC;AAA9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BA,AAC9B,AAAAN,AAAA,AAAA,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD,AAAA;AAXhB,AAWgB,AAAA,AAAA,AAAA,AAAA,AAAA;AAKlB,AAAKE,AAAc,AAAA,AAACC;AAGpB,AAAA,AAAMC,AAAgBC;AAAtB,AACE,AAAU,AAAAC,AAAA,AAAAC,AAAEL;AAAF,AAAA,AAAAI,AAAAA,AAAAA,AAAgBD,AAAAA;;AAA1B;;AAAA,AACE,AAACG,AAAMN,AAAcO,AAAMJ,AACpB,AAACK,AAAc,AAAA,AAACP,AAAUE;;;AAErC,AAAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkB/B;AAG1B,AAAA,AAAMgC,AAASV,AAAUW;AAAzB,AACE,AAACC,AAAO,AAAAC,AAAA,AAAAX,AAAEL;AAAF,AAAA,AAAAgB,AAAAA,AAAAA,AAAgBb,AAAAA;AAAWW;;AAErC,AAAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkB/B;AAI1B,AAAA,AAAMoC,AAASd;AAAf,AAAA,AAAAE,AACG,AAAAa,AAAA,AAAAb,AAAEL;AAAF,AAAA,AAAAkB,AAAAA,AAAAA,AAAgBf,AAAAA;;;AAEnB,AAAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkB/B;AAM1B,AAAA,AAAAsC,AAAMM,AAAYtB;AAAlB,AAAA,AAAAiB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAoCM;AAApC,AAAAF,AAAAJ,AAAA,AAAuCO;AAAvC,AACE,AAACzB,AAAeC;;AAChB,AAAMuB;AAAN,AACE,AAACE,AACCF,AACA,AAAKZ;AAAL,AACE,AAACD,AAAQV,AAAUW;;;AAJzB;;AAKA,AAAMa;AAAN,AACE,AAACE,AACCF,AACA,AAAKG,AAAUC;AAAf,AACE,AAACC,AAAMF,AAAUH,AAAK,AAACV,AAAQd;;;AAJrC;;;AAMF,AAAA5B,AAAA,AAAA,AAAA,AAAA,AAAYM;AACZ,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAcM;AACd,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AACQ,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAkB/B,AACD,AAAAoD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAtC,AAAAsC;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA,AAAAC,AAAAD,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAtC,AAAAsC,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA,AAAAC,AAAAD,AAAA;AAFzB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AACiB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAGzB,AAAA,AAAMyB,AAAYjC,AAAUkC;AAA5B,AACE,AAACnC,AAAeC;;AAChB,AAAA,AAAA,AAACmC,AACK,AAACC,AAAQ,AAAA,AAAKF,AAAYlC,AACtB,AAAKqC;AAAL,AACE,AAAA,AAAA,AAAA,AAACC,AAASD,AAAwBH,AACxB,AAACpB,AAAQd;AAJ/B,AAKS,AAAKqC;AAAL,AACE,AAAAE,AAAiB,AAAA,AAAA,AAAA,AAACE,AAAOJ,AAAsBH;AAA/C,AAAA,AAAAK;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAC9B,AAAQV,AAAUwC;;AADrB;;AAEAH;;;AAEb,AAAAjE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkB/B,AACHA;AAGvB,AAAA,AAAMgE,AAAiB1C,AAAU2C;AAAjC,AACE,AAAC5C,AAAeC;;AAChB,AAAA,AAAA,AAACmC,AACK,AAACC,AAAQ,AAAA,AAAK,AAACjB,AAAMyB,AAAI,AAACC,AAAKF,AAAe3C,AAC1C,AAAKqC;AAAL,AACE,AAAA,AAAA,AAAA,AAACS,AAAUT,AAAyBU,AAAM,AAACjC,AAAQd;AAH/D,AAIS,AAAKqC;AAAL,AACE,AAAAE,AAAiB,AAAAS,AAAQ,AAAA,AAAA,AAAA,AAACP,AAAOJ;AAAhB,AAAA,AAAA,AAAAW,AAAA;AAAA;;AACQ,AAAAA,AAACC,AAAYN;;;AADtC,AAAA,AAAAJ;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAEE,AAAC9B,AAAQV,AAAUwC;;AAFrB;;AAGAH;;;AAEb,AAAAjE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA,AAAAC,AAAA,AAAA,AACQ,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAkB/B,AACF,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkE,AAAWxE;AAAX,AAAA,AAAAyE,AAAAD;AAFxB,AAAA,AAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AACgB,AAAA,AAAA,AAAA,AAAA,AAAA","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/nil?","cljs.core/boolean?","cljs.core/number?","cljs.core/string?","cljs.core/keyword?","cljs.core/symbol?","cljs.core/uuid?","cljs.core.partial","cljs.core/instance?","js/Date","cljs.spec.alpha.every_impl","G__42055","cljs.core/list?","G__42056","cljs.core/vector?","G__42057","cljs.core/set?","cljs.spec.alpha.tuple_impl","G__42058","cljs.core/map?","i__13575__auto__","v__13576__auto__","cljs.core.nth","akiroz.re-frame.storage/storage-atoms","cljs.core.atom","akiroz.re-frame.storage/register-store","store-key","fexpr__42059","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","alandipert.storage-atom/local-storage","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl","akiroz.re-frame.storage/->store","data","cljs.core/reset!","fexpr__42060","akiroz.re-frame.storage/<-store","fexpr__42061","p__42062","map__42063","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","akiroz.re-frame.storage/reg-co-fx!","fx","cofx","re-frame.core/reg-fx","re-frame.core/reg-cofx","coeffects","_","cljs.core.assoc","cljs.spec.alpha/map-spec-impl","G__42065","cljs.core/contains?","akiroz.re-frame.storage/persist-db","db-key","re_frame.core.__GT_interceptor","cljs.core.keyword","context","cljs.core/assoc-in","temp__5735__auto__","value","cljs.core.get_in","akiroz.re-frame.storage/persist-db-keys","db-keys","cljs.core/str","cljs.core.sort","cljs.core.update_in","cljs.core/merge","G__42066","cljs.core/select-keys","G__42067","cljs.core/coll?"],"sourcesContent":["(ns akiroz.re-frame.storage\n  (:require [re-frame.core :refer [reg-fx reg-cofx ->interceptor]]\n            [alandipert.storage-atom :refer [local-storage]]\n            [cljs.spec.alpha :as s]\n            ))\n\n(s/def ::cljs-data\n  (s/or :nil      nil?\n        :boolean  boolean?\n        :number   number?\n        :string   string?\n        :keyword  keyword?\n        :symbol   symbol?\n        :uuid     uuid?\n        :date     (partial instance? js/Date)\n        :list     (s/coll-of  ::cljs-data :kind list?)\n        :vector   (s/coll-of  ::cljs-data :kind vector?)\n        :set      (s/coll-of  ::cljs-data :kind set?)\n        :map      (s/map-of   ::cljs-data ::cljs-data)\n        ))\n\n\n;; atom containing local-storage atoms\n(def storage-atoms (atom {}))\n\n\n(defn register-store [store-key]\n  (when-not (@storage-atoms store-key)\n    (swap! storage-atoms assoc store-key\n           (local-storage (atom nil) store-key))))\n\n(s/fdef register-store\n  :args (s/cat :store-key keyword?))\n\n\n(defn ->store [store-key data]\n  (reset! (@storage-atoms store-key) data))\n\n(s/fdef ->store\n  :args (s/cat :store-key keyword?\n               :data ::cljs-data))\n\n\n(defn <-store [store-key]\n  @(@storage-atoms store-key))\n\n(s/fdef <-store\n  :args (s/cat :store-key keyword?)\n  :ret  ::cljs-data)\n\n\n\n\n(defn reg-co-fx! [store-key {:keys [fx cofx]}]\n  (register-store store-key)\n  (when fx\n    (reg-fx\n      fx\n      (fn [data]\n        (->store store-key data))))\n  (when cofx\n    (reg-cofx\n      cofx\n      (fn [coeffects _]\n        (assoc coeffects cofx (<-store store-key))))))\n\n(s/def ::fx keyword?)\n(s/def ::cofx keyword?)\n(s/fdef reg-co-fx!\n  :args (s/cat :store-key keyword?\n               :handlers (s/keys :req-un [(or ::fx ::cofx)])))\n\n\n(defn persist-db [store-key db-key]\n  (register-store store-key)\n  (->interceptor\n    :id (keyword (str db-key \"->\" store-key))\n    :before (fn [context]\n              (assoc-in context [:coeffects :db db-key]\n                        (<-store store-key)))\n    :after (fn [context]\n             (when-let [value (get-in context [:effects :db db-key])]\n               (->store store-key value))\n             context)))\n\n(s/fdef persist-db\n  :args (s/cat :store-key keyword?\n               :db-key keyword?))\n\n\n(defn persist-db-keys [store-key db-keys]\n  (register-store store-key)\n  (->interceptor\n    :id (keyword (str (apply str (sort db-keys)) \"->\" store-key))\n    :before (fn [context]\n              (update-in context [:coeffects :db] merge (<-store store-key)))\n    :after (fn [context]\n             (when-let [value (some-> (get-in context [:effects :db])\n                                      (select-keys db-keys))]\n               (->store store-key value))\n             context)))\n\n(s/fdef persist-db-keys\n  :args (s/cat :store-key keyword?\n               :db-keys (s/coll-of keyword?)))\n\n\n"]}