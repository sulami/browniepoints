{"version":3,"sources":["alandipert/storage_atom.cljs"],"mappings":"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","names":["alandipert.storage-atom/transit-read-handlers","cljs.core.atom","alandipert.storage-atom/transit-write-handlers","alandipert.storage-atom/clj->json","x","cognitect.transit/write","cljs.core/deref","cognitect.transit.writer","alandipert.storage-atom/json->clj","cognitect.transit/read","cognitect.transit.reader","alandipert$storage-atom$IStorageBackend$_get$dyn","x__4428__auto__","m__4429__auto__","alandipert.storage-atom/-get","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","alandipert$storage-atom$IStorageBackend$_commit_BANG_$dyn","alandipert.storage-atom/-commit!","alandipert.storage-atom/IStorageBackend","this","not-found","value","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","alandipert.storage-atom/StorageBackend","alandipert.storage-atom/->StorageBackend","store","key","temp__5733__auto__","existing","alandipert.storage-atom/debounce-factory","f","func","ttime","goog.Timer/clear","cljs.core/reset!","goog.Timer/callOnce","alandipert.storage-atom/storage-delay","alandipert.storage-atom/*storage-delay*","alandipert.storage-atom/*watch-active*","alandipert.storage-atom/store","atom","backend","debounce","cljs.core._EQ_","G__42046","p1__42044#","p2__42045#","p3__42042#","p4__42043#","cljs.core/add-watch","and__4115__auto__","cljs.core.not_EQ_","or__4126__auto__","alandipert.storage-atom/maybe-update-backend","storage","k","default","e","cljs.core/empty?","*watch-active*-orig-val__42047","*watch-active*-temp-val__42048","e42049","temp__5735__auto__","sk","*watch-active*-orig-val__42050","*watch-active*-temp-val__42051","clojure.string/blank?","alandipert.storage-atom/link-storage","p1__42052#","js/window","alandipert.storage-atom/dispatch-remove-event!","event","js/document","alandipert.storage-atom/load-html-storage","alandipert.storage-atom/load-local-storage","js/localStorage","alandipert.storage-atom/load-session-storage","js/sessionStorage","alandipert.storage-atom/html-storage","alandipert.storage-atom/local-storage","alandipert.storage-atom/session-storage","alandipert.storage-atom/clear-html-storage!","alandipert.storage-atom/clear-local-storage!","alandipert.storage-atom/clear-session-storage!","alandipert.storage-atom/remove-html-storage!","alandipert.storage-atom/remove-local-storage!","alandipert.storage-atom/remove-session-storage!"],"sourcesContent":["(ns alandipert.storage-atom\n  (:require [cognitect.transit :as t]\n            [goog.Timer :as timer]\n            [clojure.string :as string]))\n\n\n(def transit-read-handlers (atom {}))\n\n(def transit-write-handlers (atom {}))\n\n(defn clj->json [x]\n  (t/write (t/writer :json {:handlers @transit-write-handlers}) x))\n\n(defn json->clj [x]\n  (t/read (t/reader :json {:handlers @transit-read-handlers}) x))\n\n(defprotocol IStorageBackend\n  \"Represents a storage resource.\"\n  (-get [this not-found])\n  (-commit! [this value] \"Commit value to storage at location.\"))\n\n(deftype StorageBackend [store key]\n  IStorageBackend\n  (-get [this not-found]\n    (if-let [existing (.getItem store (clj->json key))]\n      (json->clj existing)\n      not-found))\n  (-commit! [this value]\n    (.setItem store (clj->json key) (clj->json value))))\n\n\n(defn debounce-factory\n  \"Return a function that will always store a future call into the\n  same atom. If recalled before the time is elapsed, the call is\n  replaced without being executed.\" []\n  (let [f (atom nil)]\n    (fn [func ttime]\n      (when @f\n        (timer/clear @f))\n      (reset! f (timer/callOnce func ttime)))))\n\n(def storage-delay\n  \"Delay in ms before a change is committed to the local storage. If a\nnew change occurs before the time is elapsed, the old change is\ndiscarded an only the new one is committed.\"\n  (atom 10))\n\n(def ^:dynamic *storage-delay* nil)\n\n(def ^:dynamic *watch-active* true)\n;; To prevent a save/load loop when changing the values quickly.\n\n(defn store\n  [atom backend]\n  (let [existing (-get backend ::none)\n        debounce (debounce-factory)]\n    (if (= ::none existing)\n      (-commit! backend @atom)\n      (reset! atom existing))\n    (doto atom\n      (add-watch ::storage-watch\n                 #(when (and *watch-active*\n                             (not= %3 %4))\n                    (debounce (fn [](-commit! backend %4))\n                              (or *storage-delay*\n                                  @storage-delay)))))))\n\n(defn maybe-update-backend\n  [atom storage k default e]\n  (when (identical? storage (.-storageArea e))\n    (if (empty? (.-key e)) ;; is all storage is being cleared?\n      (binding [*watch-active* false]\n        (reset! atom default))\n      (try\n        (when-let [sk (json->clj (.-key e))]\n          (when (= sk k) ;; is the stored key the one we are looking for?\n            (binding [*watch-active* false]\n              (reset! atom (let [value (.-newValue e)] ;; new value, or is key being removed?\n                             (if-not (string/blank? value)\n                               (json->clj value)\n                               default))))))\n        (catch :default e)))))\n\n(defn link-storage\n  [atom storage k]\n  (let [default @atom]\n    (.addEventListener js/window \"storage\"\n                       #(maybe-update-backend atom storage k default %))))\n\n(defn dispatch-remove-event!\n  \"Create and dispatch a synthetic StorageEvent. Expects key to be a string.\n  An empty key indicates that all storage is being cleared.\"\n  [storage key]\n  (let [event (.createEvent js/document \"StorageEvent\")]\n    (.initStorageEvent event \"storage\" false false key nil nil\n                       (-> js/window .-location .-href)\n                       storage)\n    (.dispatchEvent js/window event)\n    nil))\n\n;;; mostly for tests\n\n(defn load-html-storage\n  [storage k]\n  (-get (StorageBackend. storage k) nil))\n\n(defn load-local-storage [k]\n  (load-html-storage js/localStorage k))\n\n(defn load-session-storage [k]\n  (load-html-storage js/sessionStorage k))\n\n;;; main API\n\n(defn html-storage\n  [atom storage k]\n  (link-storage atom storage k)\n  (store atom (StorageBackend. storage k)))\n\n(defn local-storage\n  [atom k]\n  (html-storage atom js/localStorage k))\n\n(defn session-storage\n  [atom k]\n  (html-storage atom js/sessionStorage k))\n\n;; Methods to safely remove items from storage or clear storage entirely.\n\n(defn clear-html-storage!\n  \"Clear storage and also trigger an event on the current window\n  so its atoms will be cleared as well.\"\n  [storage]\n  (.clear storage)\n  (dispatch-remove-event! storage \"\"))\n\n(defn clear-local-storage! []\n  (clear-html-storage! js/localStorage))\n\n(defn clear-session-storage! []\n  (clear-html-storage! js/sessionStorage))\n\n(defn remove-html-storage!\n  \"Remove key from storage and also trigger an event on the current\n  window so its atoms will be cleared as well.\"\n  [storage k]\n  (let [key (clj->json k)]\n    (.removeItem storage key)\n    (dispatch-remove-event! storage key)))\n\n(defn remove-local-storage! [k]\n  (remove-html-storage! js/localStorage k))\n\n(defn remove-session-storage! [k]\n  (remove-html-storage! js/sessionStorage k))\n"]}